#!/bin/bash
 
###########################################################################
#
#	Shell program help with git operations
#
#	Copyright Â© 2013-2014, Simon Sperling
#	<simon.sperling@gmx.de>
#
#	This program is free software; you can redistribute it and/or
#	modify it under the terms of the GNU General Public License as
#	published by the Free Software Foundation; either version 2 of the
#	License, or (at your option) any later version. 
#
#	This program is distributed in the hope that it will be useful, but
#	WITHOUT ANY WARRANTY; without even the implied warranty of
#	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#	General Public License for more details. 
#
#	Description:
#
#	This program writes is a menu based shell script with various
#	options to help with git operations such as committing/pushing
#	pulling and stuff. It works with a second branch and rebasing
#	to grant a moderate amount of security for your changes.
#	If there are any conflicts the programm will be paused and
#	you can continue the process after handling them.
#	Some misc options are available too ;)
#
#
#	Revisions:
#
#	31/10/2013	First release including commit/pull
#	21/01/2014	Update to v0.3:
#                           - Added continue function after conflicts
#	22/01/2014	Complete rework v0.9:
#                           - Menubased structure
#                           - Error Handling
#                           - Additional Misc options
#
#
#	$Id: sgh,v 0.9 2014/01/22 $
###########################################################################

###########################################################################
#	Constants and Global Variables
###########################################################################

# Branches
MASTER_NAME="master"
BRANCH_NAME="development"

VERSION="0.1"

commit_type=
cs=

###########################################################################
#	Main Functions
###########################################################################

# Purpose - Display pause prompt
# $1-> Message (optional)
function pause(){
    echo ""
    local message="$*"
    [ -z "$message" ] && message="Press [Enter] key to continue..."
    read -p "$message" readEnterKey
}

# Purpose - Display a menu on screen
function show_menu(){
    date
    echo "+-------------------------------------+"
    echo "| Simons Git Helper Menu              |"
    echo "+-------------------------------------+"
    echo "| [1] Create development branch       |"
    echo "| [2] Push changes to master          |"
    echo "| [3] Pull current master             |"
    echo "| [4] Show commits from specific user |"
    echo "| [5] Show complete log               |"
    echo "| [Q] Exit                            |"
    echo "+-------------------------------------+"
}

# Purpose - Display a menu on screen
function show_commit_menu(){
    echo ""
    echo "Commit Type             "
    echo "------------------------------------"
    echo "[1] TASK "
    echo "[2] FIX "
    echo "[3] DELETED "
    echo "[4] Other "
}
 
# Purpose - Display header message
# $@ - message
function write_header(){
    local h="$@"
    echo ""
    echo "---------------------------------------------------------------"
    echo "     ${h}"
    echo "---------------------------------------------------------------"
}


# Purpose - Get input via the keyboard and make a decision using case..esac 
function read_input(){
    local c
    read -p "Enter your choice [ 1 - 5 ] " c
    case $c in
        1)	create_dev ;;
        2)	push ;;
        3)	pull ;;
        4)	shortlog ;;
        5)	log ;;
        q | Q)	echo "Bye!"; exit 0 ;;
        *)	
            echo "Please select between 1 to 5 choice only."
            pause
    esac
}

# Purpose - Get input via the keyboard and make a decision using case..esac 
function read_commit_input(){
    local c
    local ct
    read -p "Enter your choice [ 1 - 4 ] " c
    case $c in
        1)	commit_type="[TASK] "; cs=1 ;;
        2)	commit_type="[FIX] "; cs=1 ;;
        3)	commit_type="[DELETED] "; cs=1 ;;
        4)
            read -p "Enter your type or leave blank: " t
            if [ "$t" != '' ]
            then
                ct="[$t] "
            fi
            commit_type="$ct"; cs=1
        ;;
        *)	
            echo "Please select between 1 to 4 choice only."
            pause
    esac
}

###########################################################################
#	git Functions
###########################################################################

# Purpose - check dir
function check_git () {
    git status >/dev/null 2>&1
    if [ $? != 0 ] 
    then
        echo "This is not a git repository. Please change to the correct directory!"
        echo ""
        exit 1;
    fi
}

# Purpose - check for errors and continue after fixing them
function check() {
    if [ $1 != 0 ]
    then
        pause "Please get rid off these errors by handling your shit! After that press [Enter] to continue..."
        shift
        case $1 in
            rebase | continue_rebase)
                add
                check $? add
                continue_rebase
                check $? continue_rebase
            ;;
            commit)
                echo "How did you do that? Freak... I will now exit..."
                exit 1
            ;;
            *)
                $*
                check $? $*
            ;;
        esac
    fi
}

# Purpose - Cleaning up code and add files
function add() {
    git add -A .
}

# Purpose - Further options for commits
# ToDo:
#   - Menu for specific commit types
function commit() {
    local m
    read -p "Please enter a commit message: " m
    git commit -m "$commit_type$m"
}

# Purpose - Rebase branch
function rebase() {
    git rebase $1
}

# Purpose - merge branch
function merge() {
    git merge $1
}

# Purpose - continue shortform
function continue_rebase() {
    git rebase --continue
}
 
# Purpose - create an extra branch for stuff :)
function create_dev(){
    write_header " Creating $BRANCH_NAME branch "
    git checkout -b $BRANCH_NAME >/dev/null 2>&1
    if [ $? != 0 ] 
    then
        echo "Branch: $BRANCH_NAME already exists!"
        git checkout $BRANCH_NAME
    fi
    pause
}

function check_dev() {
    git checkout $BRANCH_NAME >/dev/null 2>&1
    if [ $? != 0 ]
    then
        echo "Please create $BRANCH_NAME with option 1 first!"
        exit 1
    fi
}
 
# Purpose - Commit/Merge/Rebase/Push changes automaticly
function push(){
    write_header " Commit/Push changes from $BRANCH_NAME to $MASTER_NAME"
    cs=0
    
    check_dev
    
    add
    check $? add
    
    while [ "${cs}" == 0 ]
    do
        show_commit_menu
        read_commit_input
    done
    
    commit
    check $? commit
    
    git checkout $MASTER_NAME
    
    git pull
    check $? git pull
    
    git checkout $BRANCH_NAME
    
    rebase $MASTER_NAME
    check $? rebase
    
    merge $BRANCH_NAME
    check $? merge $BRANCH_NAME
    
    git push
    check $? git push
    
    git checkout $BRANCH_NAME
    
    pause "Process was successfully completed! Please press [Enter] to continue..."
}

# Purpose - Automatic pull/rebase/merge
function pull() {
    
    write_header " Pull changes from master"
    
    check_dev
    
    git checkout $MASTER_NAME
    
    git pull
    check $? git pull
    
    rebase $BRANCH_NAME
    check $? rebase $BRANCH_NAME
    
    git checkout $BRANCH_NAME
    
    merge $MASTER_NAME
    check $? merge $MASTER_NAME

    pause "Process was successfully completed! Please press [Enter] to continue..."
}

# Purpose - show shortlog for specific user
function shortlog() {
    
    write_header " Shortlog for specific author"
    
    local a
    read -p "Please insert the name of the author: " a
    git shortlog --author="$a"
    pause
}

# Purpose - show log
function log() {
    git log
    pause
}

function test_check() {
    add
    check $? add
    pause
}

###########################################################################
#	Program starts here
###########################################################################

# ignore CTRL+Z and quit singles using the trap
# removed SIGINT(CTRL+C) for possible endless loops
trap '' SIGQUIT SIGTSTP
 
# main logic
while true
do
    check_git   # check whether its a git repo or not
    clear
    show_menu	# display memu
    read_input  # wait for user input
done


